{"version":3,"sources":["redux/reducers/recipeReducer.js","redux/actions/actionTypes/index.js","redux/reducers/rootReducer.js","redux/store/index.js","containers/Recipe.jsx","redux/actions/recipe.js","containers/ShowRecipies.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","recipes","recipeName","ingredients","recipeReducer","state","action","type","payload","rootReducer","combineReducers","recipe","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","Recipe","useState","setRecipe","dispatch","useDispatch","handleChange","e","preventDefault","target","name","value","className","onChange","placeholder","onClick","alert","addRecipe","submit","ShowRecipies","useSelector","selectedRecipe","setSelectedR","console","log","map","item","key","show","App","setState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QAEMA,EAAe,CACnBC,QAAS,CACP,CAAEC,WAAY,QAASC,YAAa,mCACpC,CAAED,WAAY,MAAOC,YAAa,uBAClC,CAAED,WAAY,WAAYC,YAAa,8CAc5BC,EAVO,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCACtD,OAAQA,EAAOC,MACb,ICZsB,aDapB,OAAO,2BAAKF,GAAZ,IAAmBJ,QAAQ,GAAD,mBAAMI,EAAMJ,SAAZ,CAAqBK,EAAOE,YACxD,QACE,OAAOH,IEZAI,EAAcC,YAAgB,CACzCC,OAAQP,I,QCQJQ,GALqC,kBAAXC,QAC9BA,OAAOC,qCACPD,OAAOC,qCAAqC,IACvCC,KAGLC,YAAgBC,MAUHC,EANDC,YACZV,EACAG,G,uBCoBaQ,EAjCA,WAAO,IAAD,EACSC,mBAAS,CAAEnB,WAAY,GAAIC,YAAa,KADjD,mBACZQ,EADY,KACJW,EADI,KAEbC,EAAWC,cACXC,EAAe,SAACC,GACpBA,EAAEC,iBACFL,EAAU,2BAAKX,GAAN,kBAAee,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,UAWnD,OACE,yBAAKC,UAAU,kBACb,8CACA,2BAAOxB,KAAK,OAAOyB,SAAUP,EAAcK,MAAOnB,EAAOT,WACvD2B,KAAK,aAAaI,YAAY,iBAEhC,6BACA,8CACA,2BAAO1B,KAAK,OAAOyB,SAAUP,EAAcK,MAAOnB,EAAOR,YACvD0B,KAAK,cAAcI,YAAY,2CACjC,qEACA,6BACA,4BAAQC,QAAS,kBArBN,WACb,GAA0B,KAAtBvB,EAAOT,YAA4C,KAAvBS,EAAOR,YACrC,OAAOgC,MAAM,6BAEW,KAAtBxB,EAAOT,YAAmBiC,MAAM,qBACT,KAAvBxB,EAAOR,aAAoBgC,MAAM,0BAErCZ,EClBqB,SAACZ,GACxB,OAAO,SAAAY,GACLA,EAAS,CAAEhB,KJJW,aIIOC,QAASG,KDgB7ByB,CAAUzB,IAcM0B,KAAvB,eEASC,EA7BM,WACnB,IAAMrC,EAAUsC,aAAY,SAAAlC,GAAK,OAAIA,EAAMM,OAAOV,WADzB,EAEcoB,mBAAS,IAFvB,mBAElBmB,EAFkB,KAEFC,EAFE,KAczB,OADAC,QAAQC,IAAI,UAAW1C,GAGrB,yBAAK8B,UAAU,WACb,yBAAKA,UAAU,gBARE9B,EAAQ2C,KAAI,SAAAC,GAAI,OACnC,yBAAKC,IAAKD,EAAK3C,WAAY6B,UAAU,OAClC,wBAAIG,QAAS,kBAPL,SAACW,GACZJ,EAAaI,GAMSE,CAAKF,KAAQA,EAAK3C,iBAStC,yBAAK6B,UAAU,kBACb,+BAAQS,EAAetC,YAAmB,6BACzCsC,EAAerC,eCFT6C,MAnBf,WAAiB,IAAD,EACY3B,oBAAS,GADrB,mBACPhB,EADO,KACA4C,EADA,KAGRb,EAAY,WAChBa,GAAU5C,IAEZ,OACE,yBAAK0B,UAAU,OACb,4BAAQA,UAAU,cAAlB,uBAGA,kBAAC,EAAD,MACC1B,EAAQ,kBAAC,EAAD,MAAa,KAAK,6BACzBA,EACA,4BAAQ6B,QAASE,GAAjB,SADQ,4BAAQF,QAASE,GAAjB,gBCPIc,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUrC,MAAOA,GACf,kBAAC,EAAD,OAEFsC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.06d1fa81.chunk.js","sourcesContent":["import { ADD_RECIPE } from '../actions/actionTypes';\n\nconst initialState = {\n  recipes: [\n    { recipeName: \"Bread\", ingredients: \"Yeast, water, sugar, salt, eggs\" },\n    { recipeName: \"Pap\", ingredients: \"Water, Maize , salt\" },\n    { recipeName: \"Magwinya\", ingredients: \"Yeast, water, sugar, salt, magarine, oil\" }\n  ]\n}\n\nconst recipeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_RECIPE:\n      return { ...state, recipes: [...state.recipes, action.payload] }\n    default:\n      return state;\n  }\n\n}\n\nexport default recipeReducer;","export const ADD_RECIPE = \"ADD_RECIPE\";","import { combineReducers } from 'redux';\nimport recipeReducer from './recipeReducer';\n\nexport const rootReducer = combineReducers({\n  recipe: recipeReducer,\n})\n\nexport default { rootReducer }","\nimport { rootReducer } from '../reducers/rootReducer'\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from 'redux-thunk'\n\n\n\nconst composeEnhancers = typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n  }) : compose;\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunk)\n);\n\n\nconst store = createStore(\n  rootReducer,\n  enhancer\n)\n\n\nexport default store; ","import React from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addRecipe } from '../redux/actions/recipe'\n\n\nconst Recipe = () => {\n  const [recipe, setRecipe] = useState({ recipeName: \"\", ingredients: \"\" });\n  const dispatch = useDispatch();\n  const handleChange = (e) => {\n    e.preventDefault()\n    setRecipe({ ...recipe, [e.target.name]: e.target.value })\n  }\n  const submit = () => {\n    if (recipe.recipeName === \"\" || recipe.ingredients === \"\") {\n      return alert(\"Input fields are required\")\n    }\n    if (recipe.recipeName === \"\") alert(\"Enter recip field\")\n    if (recipe.ingredients === \"\") alert(\"Enter ingredient field\")\n\n    dispatch(addRecipe(recipe));\n  }\n  return (\n    <div className=\"Recipe-wrapper\">\n      <label>Recipe Name</label>\n      <input type=\"text\" onChange={handleChange} value={recipe.recipeName}\n        name=\"recipeName\" placeholder=\"Violate cake\"\n      />\n      <br />\n      <label>Ingredients</label>\n      <input type=\"text\" onChange={handleChange} value={recipe.ingredients}\n        name=\"ingredients\" placeholder=\"flour, baking powerder, salt, eggs ...\" />\n      <p>Enter ingredients seperated by commas,</p>\n      <br />\n      <button onClick={() => submit(recipe)}>addRecipe</button>\n    </div>\n  )\n}\n\nexport default Recipe;","import { ADD_RECIPE } from \"./actionTypes\";\n\nexport const addRecipe = (recipe) => {\n  return dispatch => {\n    dispatch({ type: ADD_RECIPE, payload: recipe })\n  }\n} ","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\n// import Recipe from './Recipe';\n\nconst ShowRecipies = () => {\n  const recipes = useSelector(state => state.recipe.recipes);\n  const [selectedRecipe, setSelectedR] = useState({});\n\n  const show = (item) => {\n    setSelectedR(item)\n  }\n\n\n  const recipe = () => recipes.map(item => (\n    <div key={item.recipeName} className=\"Map\">\n      {<h2 onClick={() => show(item)}>{item.recipeName}</h2>}\n    </div>))\n  console.log('recipes', recipes)\n  return (\n\n    <div className=\"Wrapper\">\n      <div className=\"Recipe-names\">\n        {recipe()}\n      </div>\n      <div className=\"Recipe-details\">\n        <label>{selectedRecipe.recipeName}</label><br />\n        {selectedRecipe.ingredients}\n      </div>\n    </div>\n  )\n}\n\n\nexport default ShowRecipies;","import React from 'react';\nimport './App.css';\nimport Recipe from './containers/Recipe';\nimport ShowRecipies from './containers/ShowRecipies';\nimport { useState } from 'react';\n\nfunction App () {\n  const [state, setState] = useState(false);\n\n  const addRecipe = () => {\n    setState(!state)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Collen's Recipe Box\n      </header>\n      <ShowRecipies />\n      {state ? <Recipe /> : null}<br />\n      {!state ? <button onClick={addRecipe}>Add recipe</button> :\n        <button onClick={addRecipe}>close</button>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}