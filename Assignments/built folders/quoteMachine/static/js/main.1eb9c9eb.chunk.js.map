{"version":3,"sources":["components/Quote.js","components/Quotebox.js","App.js","serviceWorker.js","index.js"],"names":["Component","Quotebox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showQuote","item","setState","randomizedQuote","number","nextQuote","Math","floor","random","state","quotes","length","loaded","_this2","fetch","then","res","json","_this3","react_default","a","createElement","id","splice","map","key","quote","onClick","className","author","index_es","url","options","text","concat","via","value","App","console","log","components_Quotebox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAGoBA,yBC2DLC,cAzDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBVQ,UAAY,SAAAC,GACRR,EAAKS,SAAS,CACVC,gBAAiBF,EACjBG,OAAQH,EAAKG,UAxBFX,EA4BnBY,UAAY,WACR,OAAOC,KAAKC,MAAMD,KAAKE,SAAWf,EAAKgB,MAAMC,OAAOA,OAAOC,SA3B3DlB,EAAKgB,MAAQ,CACTC,OAAQ,GACRE,QAAQ,EACRT,gBAAiB,KACjBC,OAAQ,GANGX,mFAUC,IAAAoB,EAAAjB,KAChBkB,MAAM,0IACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKX,SAAS,CACVU,QAAQ,EACRF,OAAQO,uCAkBf,IAAAC,EAAAtB,KACL,OACIuB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAC0B,IAA7B1B,KAAKa,MAAMC,OAAOC,OAAef,KAAKa,MAAMC,OAAOA,OAAOa,OAAO,EAAG,GAAGC,IAAI,SAAAvB,GAAI,OAC5EkB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYG,IAAKxB,EAAKyB,MAAOC,QAAS,kBAAMT,EAAKlB,UAAUC,KAC/DkB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,cAAaT,EAAAC,EAAAC,cAAA,MAAIO,UAAU,MAAd,IAAqB3B,EAAKyB,QACtDP,EAAAC,EAAAC,cAAA,OAAKO,UAAU,UAAST,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,mBAAmBpB,EAAK4B,SACnDV,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WACXT,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACIC,IAAK,qCACLC,QAAS,CAAEC,KAAI,GAAAC,OAAKjC,EAAKyB,OAASS,IAAK,mBAE3ChB,EAAAC,EAAAC,cAAA,YAEJF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKb,aAAa+B,MAAM,SAASR,UAAU,QAAlE,gBAEHT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,mBAnDbtC,aCYR+C,MATf,WAEE,OADAC,QAAQC,IAAI,YAEVpB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACmB,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.1eb9c9eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Quote extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n        return (\n            <div>\n\n            </div>\n        );\n    }\n}\n\nQuote.propTypes = {\n\n};\n\nexport default Quote;","import React, { Component } from 'react';\nimport { TwitterShareButton, } from 'react-twitter-embed';\n\n\nclass Quotebox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quotes: [],\n            loaded: false,\n            randomizedQuote: null,\n            number: 0\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    loaded: true,\n                    quotes: json\n                })\n            })\n\n    }\n    showQuote = item => {\n        this.setState({\n            randomizedQuote: item,\n            number: item.number\n        })\n    }\n\n    nextQuote = () => {\n        return Math.floor(Math.random() * this.state.quotes.quotes.length);\n    }\n\n   \n\n    render() {\n        return (\n            <div id=\"wrapper\">\n                {this.state.quotes.length !== 0 ? this.state.quotes.quotes.splice(0, 1).map(item => (\n                    <div id=\"quote-box\" key={item.quote} onClick={() => this.showQuote(item)}>\n                        <div className=\"quote-text\"><h1 className=\"H1\">\"{item.quote}</h1></div>\n                        <div className=\"author\"><p><strong>-</strong>{item.author}</p></div>\n                        <div className=\"Buttons\">\n                            <TwitterShareButton\n                                url={'https://facebook.com/saurabhnemade'}\n                                options={{ text: `${item.quote}`, via: 'saurabhnemade' }}\n                            />\n                            <br />\n                        </div>\n                        <button onClick={() => this.nextQuote()} value='Submit' className=\"Next\">New quote</button>\n                    </div>\n                )) : <div className=\"Loader\"></div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Quotebox;","import React from 'react';\n// import logo from './logo.svg';\nimport Quote from './components/Quote'\nimport './App.css';\nimport Quotebox from './components/Quotebox';\n\n\nfunction App() {\n  console.log('render 2')\n  return (\n    <div className=\"App\" >\n      <Quotebox/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}