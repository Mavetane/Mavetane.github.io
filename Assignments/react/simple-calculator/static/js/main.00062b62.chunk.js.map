{"version":3,"sources":["components/Index.jsx","logo.svg","App.js","serviceWorker.js","index.js"],"names":["Index","props","handleChange","digit","count","state","setState","String","results","reset","calculate","total","eval","error","className","value","this","onClick","Component","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+sCAEMA,M,qBACF,eAAYC,OAAQ,IAAD,gMACf,qXAAMA,QADS,MAQnBC,aAAe,SAACC,GAAW,IACfC,EAAU,MAAKC,MAAfD,MACR,MAAKE,SAAS,CACVF,MAAiB,MAAVA,EAAgBG,OAAOJ,GAASC,EAAQD,EAC/CK,QAAS,MAZE,MAgBnBC,MAAQ,WACJ,MAAKH,SAAS,CAAEF,MAAO,OAjBR,MAmBnBM,UAAY,WACR,IAAK,IAEON,MAAU,MAAKC,MAAfD,MACFO,MAAQC,KAAKR,OACnB,MAAKE,SAAS,CACVE,QAASG,MACTP,MAAO,KAGf,MAAOS,OACH,MAAKP,SAAS,CACVF,MAAO,gBA7Bf,MAAKC,MAAQ,CACTD,MAAO,IACPI,QAAS,IAJE,M,oYAqCT,IAAD,OACL,OACI,kEAAKM,UAAU,SACX,kEAAKA,UAAU,cACX,oEAAOC,MAA6B,IAAtBC,KAAKX,MAAMG,QAAgBQ,KAAKX,MAAMD,MAAOY,KAAKX,MAAMG,QAASM,UAAU,sBACzF,kEAAKA,UAAU,cACX,kEAAKA,UAAU,mBACX,qEAAQG,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,KAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKf,aAAa,OAAzC,KACA,qEAAQe,QAAS,kBAAM,EAAKR,UAA5B,MACA,qEAAQQ,QAAS,kBAAM,EAAKP,cAA5B,a,OA7DRQ,8CA0ELlB,6B,4EC5EfmB,EAAOC,QAAU,IAA0B,kC,qHCc5BC,MATf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAAlB,uBACA,kBAACd,EAAA,EAAD,QCGcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.00062b62.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: '0',\n            results: \"\"\n        }\n\n    }\n    handleChange = (digit) => {\n        const { count } = this.state\n        this.setState({\n            count: count === '0' ? String(digit) : count + digit,\n            results: \"\"\n        })\n    }\n  \n    reset = () => {\n        this.setState({ count: '0' })\n    }\n    calculate = () => {\n        try {\n\n            const { count } = this.state\n            const total = eval(count)\n            this.setState({\n                results: total,\n                count: \"\"\n            })\n        }\n        catch (error) {\n            this.setState({\n                count: \"undefined\"\n            })\n        }\n    \n    }\n    \n    render() {\n        return (\n            <div className=\"Cover\">\n                <div className=\"Calculator\">\n                    <input value={this.state.results == \"\" ? this.state.count: this.state.results} className=\"Calculator-screen\" />\n                    <div className=\"Background\">\n                        <div className=\"Calculator-keys\">\n                            <button onClick={() => this.handleChange(7)}>7</button>\n                            <button onClick={() => this.handleChange(8)}>8</button>\n                            <button onClick={() => this.handleChange(9)}>9</button>\n                            <button onClick={() => this.handleChange(4)}>4</button>\n                            <button onClick={() => this.handleChange(5)}>5</button>\n                            <button onClick={() => this.handleChange(6)}>6</button>\n                            <button onClick={() => this.handleChange(1)}>1</button>\n                            <button onClick={() => this.handleChange(2)}>2</button>\n                            <button onClick={() => this.handleChange(3)}>3</button>\n                            <button onClick={() => this.handleChange(\".\")}>.</button>\n                            <button onClick={() => this.handleChange(\"0\")}>0</button>\n                            <button onClick={() => this.handleChange(\"+\")}>+</button>\n                            <button onClick={() => this.handleChange(\"-\")}>-</button>\n                            <button onClick={() => this.handleChange(\"*\")}>*</button>\n                            <button onClick={() => this.handleChange(\"/\")}>/</button>\n                            <button onClick={() => this.reset()}>AC</button>\n                            <button onClick={() => this.calculate()}>=</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nIndex.propTypes = {\n\n};\n\nexport default Index;","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Index from './components/Index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Collen's Calculator</header>\n      <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}