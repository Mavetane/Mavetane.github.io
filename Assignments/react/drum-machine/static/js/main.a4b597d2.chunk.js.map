{"version":3,"sources":["config/index.jsx","components/Buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["audios","url","name","letter","pianoAudios","Buttons","props","controlSwitch","setState","switch","state","togglePower","power","handleClick","sound","play","Audio","beat","className","this","map","onClick","id","type","ClassName","min","max","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4b597d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nexport const audios = [{\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n    name: 'Heater-1',\n    letter: 'Q'\n},\n{\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n    name: 'Heater-2',\n    letter: 'W'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n    name: 'Heater-3',\n    letter: 'E'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n    name: 'Heater-4',\n    letter: 'A'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n    name: 'Heater-6',\n    letter: 'S'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n    name: 'Dsc_Oh',\n    letter: 'D'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n    name: 'Kick_n_Hat',\n    letter: 'Z'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n    name: 'RP4_KICK1',\n    letter: 'X'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n    name: 'Cev_H2',\n    letter: 'C'\n}\n]\n\nexport const pianoAudios = [{\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\n    name: 'Chord_1',\n    letter: 'Q',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\n    name: 'Chord_2',\n    letter: 'W',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\n    name: 'Chord_3',\n    letter: 'E',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n    name: 'Give_us_a_light',\n    letter: 'A',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\n    name: 'Dry_ohh',\n    letter: 'S',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\n    name: 'Bld_H1',\n    letter: 'D',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n    name: 'puncy_kick_1',\n    letter: 'Z',\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n    name: 'side_stick_1',\n    letter: 'X'\n}, {\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n    name: 'Brk_Snr',\n    letter: 'C',\n}\n]\n","import React, { Component } from 'react';\nimport { audios, pianoAudios } from '../config/index';\n\nclass Buttons extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            play: false,\n            switch: false,\n            power: false,\n            beat: \"\"\n        }\n    }\n    controlSwitch = () => {\n        this.setState({\n            switch: !this.state.switch\n        })\n    }\n    togglePower = () => {\n        this.setState({ power: !this.state.power })\n    }\n\n    handleClick = (sound) => {\n        if (this.state.power === true) {\n            if (this.state.play !== true) {\n                let audio = new Audio(sound.url)\n                return audio.play()\n            }\n            this.setState({\n                play: !this.state.play\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Wrapper\">\n                {!this.state.switch == true ?\n                    <div className=\"Buttons\">\n                        {audios.map(sound => {\n                            return <div className=\"Button-mods\"><button onClick={() => this.handleClick(sound)} id={sound.name}>{sound.letter}</button></div>\n                        })}\n                    </div> : <div className=\"Piano\">{pianoAudios.map(sound => {\n                        return <div><button onClick={() => this.handleClick(sound)} id={sound.name}>{sound.letter}</button></div>\n                    })}</div>}\n\n                <div className=\"Controls\">\n                    <p>Power</p>\n                    <label className=\"Power\">\n                        <input type=\"checkbox\" onClick={() => this.togglePower()} />\n                        <span className=\"Slider-two\"></span>\n                    </label><br />\n                    <div className=\"Blank\">{this.state.beat}</div>\n                    <br />\n                    <div ClassName=\"Box\">\n                        <center><div id=\"Value\"></div></center>\n                    </div>\n                    <div className=\"Volume-container\">\n                        <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" className=\"Volume-slider\" id=\"Volume-slider\" />\n                    </div><br />\n                    {!this.state.switch == true ? <h4>Heater</h4> : <h4>Piano</h4>}\n                    <label className=\"Switch\">\n                        <input type=\"checkbox\" onClick={() => this.controlSwitch()} />\n                        <span className=\"Slider\"></span>\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nButtons.propTypes = {\n};\n\nexport default Buttons;","import React from 'react';\nimport './App.css';\nimport './components/Buttons'\nimport Buttons from './components/Buttons';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Drum Machine!</header>\n      <Buttons/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}